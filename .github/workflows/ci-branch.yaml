name: ci-branch
env:
  SONARCLOUD_TASK_URL: https://sonarcloud.io/api/ce/task
  SONARCLOUD_PROJECT_STATUS_URL: https://sonarcloud.io/api/qualitygates/project_status
  RELEASE_VERSION: ${{secrets.RELEASE_VERSION}}
  DEV_VERSION: ${{secrets.DEV_VERSION}}
  VERSION_UPDATE_TYPE: ${{secrets.VERSION_UPDATE_TYPE}}
on:
  push:
    branches:
      - '**'
      - '!master'
jobs:
  tests:
    runs-on: ubuntu-16.04
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Python setup
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt -r requirements-test.txt
      - name: running unit tests
        run: |
          python -m pytest tests/unit --cov=isotope_pattern_lib --cov-report=xml:./artifacts/test-report/unit/coverage-report.xml
      - name: running integration tests
        run: |
          python -m pytest tests/integration --cov=isotope_pattern_lib --cov-report=xml:./artifacts/test-report/integration/coverage-report.xml
      - name: saving artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ./artifacts
  code-analysis:
    needs: tests
    runs-on: ubuntu-16.04
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: branch name extraction
        id: branch_extraction
        run: echo "##[set-output name=branch_name;]$(echo ${GITHUB_REF#refs/heads/})"
      - name: loading artifacts
        uses: actions/download-artifact@v2
        with:
          name: coverage-report
      - name: SonarCloud scan
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          SONAR_TOKEN: ${{secrets.SONARCLOUD_TOKEN}}
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
          unzip ./sonar-scanner-cli-4.4.0.2170-linux.zip
          rm ./sonar-scanner-cli-4.4.0.2170-linux.zip
          mv ./sonar-scanner-4.4.0.2170-linux /opt
          mv /opt/sonar-scanner-4.4.0.2170-linux /opt/sonar-scanner
          /opt/sonar-scanner/bin/sonar-scanner \
            -Dsonar.organization=${{secrets.SONARCLOUD_ORGANIZATION}} \
            -Dsonar.projectKey=${{secrets.SONARCLOUD_PROJECT_KEY}} \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.python.coverage.reportPaths=test-report/**/coverage-report.xml \
            -Dsonar.exclusions=test-report/** \
            -Dsonar.branch.name=${{steps.branch_extraction.outputs.branch_name}}
      - name: SonarCloud quality gate retrieval
        id: quality_gate
        run: |
          taskId=$(awk -v FS="ceTaskId=" 'NF>1{print $2}' .scannerwork/report-task.txt)
          echo "taskId=${taskId}"
          taskResponse=$(curl -u ${{secrets.SONARCLOUD_TOKEN}}: --location --request GET "${{env.SONARCLOUD_TASK_URL}}?id=$taskId")
          qualityGateResponse=$(curl --location --request GET '${{env.SONARCLOUD_PROJECT_STATUS_URL}}?analysisId=$(fromJSON(taskResponse).task.analysisId)&projectKey=${{secrets.SONARCLOUD_PROJECT_KEY}}')
          echo "::set-output name=qualityGateResponse::$qualityGateResponse"
      - name: SonarCloud quality gate evaluation
        if: ${{fromJSON(steps.quality_gate.outputs.qualityGateResponse).projectStatus.status == 'ERROR'}}
        run: |
          echo "The quality gate was not passed"
          exit 1
  publishing-snapshot:
    needs: code-analysis
    runs-on: ubuntu-16.04
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Python setup
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: latest tag retrieval
        id: latest_tag_retrieval
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        continue-on-error: true
      - name: latest tag definition
        run: |
          latestTag='0.0.0'
          if ${{steps.latest_tag_retrieval.outcome == 'success'}}
          then
            latestTag=${{steps.latest_tag_retrieval.outputs.tag}}
          fi
          echo "latest tag is defined as ${latestTag}"
          echo "${{env.RELEASE_VERSION}}:${{env.DEV_VERSION}}:${{env.VERSION_UPDATE_TYPE}}"
          echo "::set-output name=latestTag::$latestTag"
      - name: build the artifact
        run: |
          python -m pip install wheel
          python setup.py sdist bdist_wheel bdist_egg
      - name: publish the artifact
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{secrets.TEST_PYPI_TOKEN}}
          repository_url: https://test.pypi.org/legacy
